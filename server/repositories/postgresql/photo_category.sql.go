// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: photo_category.sql

package postgresql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deletePhotoCategory = `-- name: DeletePhotoCategory :execrows
UPDATE
    photo_categories
SET
    deleted_at = $1
WHERE
    id = $2
AND
    deleted_at IS NULL
`

type DeletePhotoCategoryParams struct {
	DeletedAt pgtype.Timestamptz `json:"deleted_at"`
	ID        pgtype.Text        `json:"id"`
}

func (q *Queries) DeletePhotoCategory(ctx context.Context, arg DeletePhotoCategoryParams) (int64, error) {
	result, err := q.db.Exec(ctx, deletePhotoCategory, arg.DeletedAt, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const findAllPhotoCategories = `-- name: FindAllPhotoCategories :many
SELECT
    id,
    category,
    author,
    created_at
FROM
    photo_categories
WHERE
    deleted_at IS NULL
ORDER BY
    category ASC
`

type FindAllPhotoCategoriesRow struct {
	ID        string             `json:"id"`
	Category  string             `json:"category"`
	Author    string             `json:"author"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) FindAllPhotoCategories(ctx context.Context) ([]FindAllPhotoCategoriesRow, error) {
	rows, err := q.db.Query(ctx, findAllPhotoCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FindAllPhotoCategoriesRow{}
	for rows.Next() {
		var i FindAllPhotoCategoriesRow
		if err := rows.Scan(
			&i.ID,
			&i.Category,
			&i.Author,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findPhotoCategoryByID = `-- name: FindPhotoCategoryByID :one
SELECT
    id,
    category,
    author,
    created_at,
    updated_at
FROM
    photo_categories
WHERE
    id = $1
AND
    deleted_at IS NULL
`

type FindPhotoCategoryByIDRow struct {
	ID        string             `json:"id"`
	Category  string             `json:"category"`
	Author    string             `json:"author"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) FindPhotoCategoryByID(ctx context.Context, dollar_1 pgtype.Text) (FindPhotoCategoryByIDRow, error) {
	row := q.db.QueryRow(ctx, findPhotoCategoryByID, dollar_1)
	var i FindPhotoCategoryByIDRow
	err := row.Scan(
		&i.ID,
		&i.Category,
		&i.Author,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertPhotoCategory = `-- name: InsertPhotoCategory :exec
INSERT INTO photo_categories(id, category, author, created_at)
VALUES ($1, $2, $3, $4)
`

type InsertPhotoCategoryParams struct {
	Column1 pgtype.Text        `json:"column_1"`
	Column2 pgtype.Text        `json:"column_2"`
	Column3 pgtype.Text        `json:"column_3"`
	Column4 pgtype.Timestamptz `json:"column_4"`
}

func (q *Queries) InsertPhotoCategory(ctx context.Context, arg InsertPhotoCategoryParams) error {
	_, err := q.db.Exec(ctx, insertPhotoCategory,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Column4,
	)
	return err
}

const updatePhotoCategory = `-- name: UpdatePhotoCategory :execrows
UPDATE
    photo_categories
SET
    category = $1,
    updated_at = $2
WHERE
    id = $3
AND
    deleted_at IS NULL
`

type UpdatePhotoCategoryParams struct {
	Category  pgtype.Text        `json:"category"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	ID        pgtype.Text        `json:"id"`
}

func (q *Queries) UpdatePhotoCategory(ctx context.Context, arg UpdatePhotoCategoryParams) (int64, error) {
	result, err := q.db.Exec(ctx, updatePhotoCategory, arg.Category, arg.UpdatedAt, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
