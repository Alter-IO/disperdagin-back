// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: public_information.sql

package postgresql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deletePublicInfo = `-- name: DeletePublicInfo :execrows
UPDATE
    public_information
SET
    deleted_at = $1
WHERE
    id = $2
AND
    deleted_at IS NULL
`

type DeletePublicInfoParams struct {
	DeletedAt pgtype.Timestamptz `json:"deleted_at"`
	ID        pgtype.Text        `json:"id"`
}

func (q *Queries) DeletePublicInfo(ctx context.Context, arg DeletePublicInfoParams) (int64, error) {
	result, err := q.db.Exec(ctx, deletePublicInfo, arg.DeletedAt, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const findAllPublicInfo = `-- name: FindAllPublicInfo :many
SELECT
    id,
    document_name,
    file_name,
    public_info_type,
    author,
    created_at
FROM
    public_information
WHERE
    deleted_at IS NULL
ORDER BY
    created_at DESC
`

type FindAllPublicInfoRow struct {
	ID             string             `json:"id"`
	DocumentName   string             `json:"document_name"`
	FileName       string             `json:"file_name"`
	PublicInfoType string             `json:"public_info_type"`
	Author         string             `json:"author"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) FindAllPublicInfo(ctx context.Context) ([]FindAllPublicInfoRow, error) {
	rows, err := q.db.Query(ctx, findAllPublicInfo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FindAllPublicInfoRow{}
	for rows.Next() {
		var i FindAllPublicInfoRow
		if err := rows.Scan(
			&i.ID,
			&i.DocumentName,
			&i.FileName,
			&i.PublicInfoType,
			&i.Author,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findPublicInfoByID = `-- name: FindPublicInfoByID :one
SELECT
    id,
    document_name,
    file_name,
    public_info_type,
    description,
    author,
    created_at,
    updated_at
FROM
    public_information
WHERE
    id = $1
AND
    deleted_at IS NULL
`

type FindPublicInfoByIDRow struct {
	ID             string             `json:"id"`
	DocumentName   string             `json:"document_name"`
	FileName       string             `json:"file_name"`
	PublicInfoType string             `json:"public_info_type"`
	Description    pgtype.Text        `json:"description"`
	Author         string             `json:"author"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) FindPublicInfoByID(ctx context.Context, dollar_1 pgtype.Text) (FindPublicInfoByIDRow, error) {
	row := q.db.QueryRow(ctx, findPublicInfoByID, dollar_1)
	var i FindPublicInfoByIDRow
	err := row.Scan(
		&i.ID,
		&i.DocumentName,
		&i.FileName,
		&i.PublicInfoType,
		&i.Description,
		&i.Author,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findPublicInfoByType = `-- name: FindPublicInfoByType :many
SELECT
    id,
    document_name,
    file_name,
    public_info_type,
    author,
    created_at
FROM
    public_information
WHERE
    public_info_type = $1
AND
    deleted_at IS NULL
ORDER BY
    created_at DESC
`

type FindPublicInfoByTypeRow struct {
	ID             string             `json:"id"`
	DocumentName   string             `json:"document_name"`
	FileName       string             `json:"file_name"`
	PublicInfoType string             `json:"public_info_type"`
	Author         string             `json:"author"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) FindPublicInfoByType(ctx context.Context, dollar_1 pgtype.Text) ([]FindPublicInfoByTypeRow, error) {
	rows, err := q.db.Query(ctx, findPublicInfoByType, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FindPublicInfoByTypeRow{}
	for rows.Next() {
		var i FindPublicInfoByTypeRow
		if err := rows.Scan(
			&i.ID,
			&i.DocumentName,
			&i.FileName,
			&i.PublicInfoType,
			&i.Author,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertPublicInfo = `-- name: InsertPublicInfo :exec
INSERT INTO public_information(id, document_name, file_name, public_info_type, description, author, created_at)
VALUES ($1, $2, $3, $4, $5, $6, $7)
`

type InsertPublicInfoParams struct {
	Column1 pgtype.Text        `json:"column_1"`
	Column2 pgtype.Text        `json:"column_2"`
	Column3 pgtype.Text        `json:"column_3"`
	Column4 pgtype.Text        `json:"column_4"`
	Column5 pgtype.Text        `json:"column_5"`
	Column6 pgtype.Text        `json:"column_6"`
	Column7 pgtype.Timestamptz `json:"column_7"`
}

func (q *Queries) InsertPublicInfo(ctx context.Context, arg InsertPublicInfoParams) error {
	_, err := q.db.Exec(ctx, insertPublicInfo,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Column4,
		arg.Column5,
		arg.Column6,
		arg.Column7,
	)
	return err
}

const updatePublicInfo = `-- name: UpdatePublicInfo :execrows
UPDATE
    public_information
SET
    document_name = $1,
    file_name = $2,
    public_info_type = $3,
    description = $4,
    updated_at = $5
WHERE
    id = $6
AND
    deleted_at IS NULL
`

type UpdatePublicInfoParams struct {
	DocumentName   pgtype.Text        `json:"document_name"`
	FileName       pgtype.Text        `json:"file_name"`
	PublicInfoType pgtype.Text        `json:"public_info_type"`
	Description    pgtype.Text        `json:"description"`
	UpdatedAt      pgtype.Timestamptz `json:"updated_at"`
	ID             pgtype.Text        `json:"id"`
}

func (q *Queries) UpdatePublicInfo(ctx context.Context, arg UpdatePublicInfoParams) (int64, error) {
	result, err := q.db.Exec(ctx, updatePublicInfo,
		arg.DocumentName,
		arg.FileName,
		arg.PublicInfoType,
		arg.Description,
		arg.UpdatedAt,
		arg.ID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
