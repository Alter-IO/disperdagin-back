// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: video.sql

package postgresql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteVideo = `-- name: DeleteVideo :execrows
UPDATE
    videos
SET
    deleted_at = $1
WHERE
    id = $2
AND
    deleted_at IS NULL
`

type DeleteVideoParams struct {
	DeletedAt pgtype.Timestamptz `json:"deleted_at"`
	ID        string             `json:"id"`
}

func (q *Queries) DeleteVideo(ctx context.Context, arg DeleteVideoParams) (int64, error) {
	result, err := q.db.Exec(ctx, deleteVideo, arg.DeletedAt, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const findAllVideos = `-- name: FindAllVideos :many
SELECT
    id,
    title,
    link,
    author,
    created_at
FROM
    videos
WHERE
    deleted_at IS NULL
ORDER BY
    created_at DESC
`

type FindAllVideosRow struct {
	ID        string             `json:"id"`
	Title     string             `json:"title"`
	Link      string             `json:"link"`
	Author    string             `json:"author"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) FindAllVideos(ctx context.Context) ([]FindAllVideosRow, error) {
	rows, err := q.db.Query(ctx, findAllVideos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FindAllVideosRow{}
	for rows.Next() {
		var i FindAllVideosRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Link,
			&i.Author,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findVideoByID = `-- name: FindVideoByID :one
SELECT
    id,
    title,
    link,
    description,
    author,
    created_at,
    updated_at
FROM
    videos
WHERE
    id = $1
AND
    deleted_at IS NULL
`

type FindVideoByIDRow struct {
	ID          string             `json:"id"`
	Title       string             `json:"title"`
	Link        string             `json:"link"`
	Description pgtype.Text        `json:"description"`
	Author      string             `json:"author"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) FindVideoByID(ctx context.Context, id string) (FindVideoByIDRow, error) {
	row := q.db.QueryRow(ctx, findVideoByID, id)
	var i FindVideoByIDRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Link,
		&i.Description,
		&i.Author,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertVideo = `-- name: InsertVideo :exec
INSERT INTO videos(id, title, link, description, author, created_at)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
)
`

type InsertVideoParams struct {
	ID          string             `json:"id"`
	Title       string             `json:"title"`
	Link        string             `json:"link"`
	Description pgtype.Text        `json:"description"`
	Author      string             `json:"author"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) InsertVideo(ctx context.Context, arg InsertVideoParams) error {
	_, err := q.db.Exec(ctx, insertVideo,
		arg.ID,
		arg.Title,
		arg.Link,
		arg.Description,
		arg.Author,
		arg.CreatedAt,
	)
	return err
}

const updateVideo = `-- name: UpdateVideo :execrows
UPDATE
    videos
SET
    title = $1,
    link = $2,
    description = $3,
    updated_at = $4
WHERE
    id = $5
AND
    deleted_at IS NULL
`

type UpdateVideoParams struct {
	Title       string             `json:"title"`
	Link        string             `json:"link"`
	Description pgtype.Text        `json:"description"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
	ID          string             `json:"id"`
}

func (q *Queries) UpdateVideo(ctx context.Context, arg UpdateVideoParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateVideo,
		arg.Title,
		arg.Link,
		arg.Description,
		arg.UpdatedAt,
		arg.ID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
