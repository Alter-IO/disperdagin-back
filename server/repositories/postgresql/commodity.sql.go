// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: commodity.sql

package postgresql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteCommodity = `-- name: DeleteCommodity :execrows
UPDATE
    commodities
SET
    deleted_at = $1
WHERE
    id = $2
AND
    deleted_at IS NULL
`

type DeleteCommodityParams struct {
	DeletedAt pgtype.Timestamptz `json:"deleted_at"`
	ID        string             `json:"id"`
}

func (q *Queries) DeleteCommodity(ctx context.Context, arg DeleteCommodityParams) (int64, error) {
	result, err := q.db.Exec(ctx, deleteCommodity, arg.DeletedAt, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const findAllCommodities = `-- name: FindAllCommodities :many
SELECT
    id,
    name,
    unit,
    commodity_type_id,
    author,
    created_at
FROM
    commodities
WHERE
    deleted_at IS NULL
ORDER BY
    name ASC
`

type FindAllCommoditiesRow struct {
	ID              string             `json:"id"`
	Name            string             `json:"name"`
	Unit            string             `json:"unit"`
	CommodityTypeID string             `json:"commodity_type_id"`
	Author          string             `json:"author"`
	CreatedAt       pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) FindAllCommodities(ctx context.Context) ([]FindAllCommoditiesRow, error) {
	rows, err := q.db.Query(ctx, findAllCommodities)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FindAllCommoditiesRow{}
	for rows.Next() {
		var i FindAllCommoditiesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Unit,
			&i.CommodityTypeID,
			&i.Author,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findCommoditiesByType = `-- name: FindCommoditiesByType :many
SELECT
    id,
    name,
    unit,
    commodity_type_id,
    author,
    created_at
FROM
    commodities
WHERE
    commodity_type_id = $1
AND
    deleted_at IS NULL
ORDER BY
    name ASC
`

type FindCommoditiesByTypeRow struct {
	ID              string             `json:"id"`
	Name            string             `json:"name"`
	Unit            string             `json:"unit"`
	CommodityTypeID string             `json:"commodity_type_id"`
	Author          string             `json:"author"`
	CreatedAt       pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) FindCommoditiesByType(ctx context.Context, commodityTypeID string) ([]FindCommoditiesByTypeRow, error) {
	rows, err := q.db.Query(ctx, findCommoditiesByType, commodityTypeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FindCommoditiesByTypeRow{}
	for rows.Next() {
		var i FindCommoditiesByTypeRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Unit,
			&i.CommodityTypeID,
			&i.Author,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findCommodityByID = `-- name: FindCommodityByID :one
SELECT
    c.id,
    c.commodity_type_id,
    ct.description as commodity_type_name,
    c.name,
    c.unit,
    c.description,
    c.author,
    c.created_at,
    c.updated_at
FROM
    commodities c
LEFT JOIN
    commodity_types ct ON c.commodity_type_id = ct.id AND ct.deleted_at IS NULL
WHERE
    c.id = $1
AND
    c.deleted_at IS NULL
`

type FindCommodityByIDRow struct {
	ID                string             `json:"id"`
	CommodityTypeID   string             `json:"commodity_type_id"`
	CommodityTypeName pgtype.Text        `json:"commodity_type_name"`
	Name              string             `json:"name"`
	Unit              string             `json:"unit"`
	Description       pgtype.Text        `json:"description"`
	Author            string             `json:"author"`
	CreatedAt         pgtype.Timestamptz `json:"created_at"`
	UpdatedAt         pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) FindCommodityByID(ctx context.Context, id string) (FindCommodityByIDRow, error) {
	row := q.db.QueryRow(ctx, findCommodityByID, id)
	var i FindCommodityByIDRow
	err := row.Scan(
		&i.ID,
		&i.CommodityTypeID,
		&i.CommodityTypeName,
		&i.Name,
		&i.Unit,
		&i.Description,
		&i.Author,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findLatestCommodities = `-- name: FindLatestCommodities :one
SELECT
    id,
    commodities,
    publish_date
FROM
    daily_commodities
ORDER BY 
    publish_date DESC
LIMIT 1
`

func (q *Queries) FindLatestCommodities(ctx context.Context) (DailyCommodity, error) {
	row := q.db.QueryRow(ctx, findLatestCommodities)
	var i DailyCommodity
	err := row.Scan(&i.ID, &i.Commodities, &i.PublishDate)
	return i, err
}

const insertCommodity = `-- name: InsertCommodity :exec
INSERT INTO commodities(id, name, unit, description, commodity_type_id, author, created_at)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7
)
`

type InsertCommodityParams struct {
	ID              string             `json:"id"`
	Name            string             `json:"name"`
	Unit            string             `json:"unit"`
	Description     pgtype.Text        `json:"description"`
	CommodityTypeID string             `json:"commodity_type_id"`
	Author          string             `json:"author"`
	CreatedAt       pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) InsertCommodity(ctx context.Context, arg InsertCommodityParams) error {
	_, err := q.db.Exec(ctx, insertCommodity,
		arg.ID,
		arg.Name,
		arg.Unit,
		arg.Description,
		arg.CommodityTypeID,
		arg.Author,
		arg.CreatedAt,
	)
	return err
}

const updateCommodity = `-- name: UpdateCommodity :execrows
UPDATE
    commodities
SET
    name = $1,
    unit = $2,
    description = $3,
    commodity_type_id = $4,
    updated_at = $5
WHERE
    id = $6
AND
    deleted_at IS NULL
`

type UpdateCommodityParams struct {
	Name            string             `json:"name"`
	Unit            string             `json:"unit"`
	Description     pgtype.Text        `json:"description"`
	CommodityTypeID string             `json:"commodity_type_id"`
	UpdatedAt       pgtype.Timestamptz `json:"updated_at"`
	ID              string             `json:"id"`
}

func (q *Queries) UpdateCommodity(ctx context.Context, arg UpdateCommodityParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateCommodity,
		arg.Name,
		arg.Unit,
		arg.Description,
		arg.CommodityTypeID,
		arg.UpdatedAt,
		arg.ID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
