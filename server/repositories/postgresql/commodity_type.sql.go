// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: commodity_type.sql

package postgresql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteCommodityType = `-- name: DeleteCommodityType :execrows
UPDATE
    commodity_types
SET
    deleted_at = $1
WHERE
    id = $2
AND
    deleted_at IS NULL
`

type DeleteCommodityTypeParams struct {
	DeletedAt pgtype.Timestamptz `json:"deleted_at"`
	ID        pgtype.Text        `json:"id"`
}

func (q *Queries) DeleteCommodityType(ctx context.Context, arg DeleteCommodityTypeParams) (int64, error) {
	result, err := q.db.Exec(ctx, deleteCommodityType, arg.DeletedAt, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const findAllCommodityTypes = `-- name: FindAllCommodityTypes :many
SELECT
    id,
    description,
    author,
    created_at
FROM
    commodity_types
WHERE
    deleted_at IS NULL
ORDER BY
    description ASC
`

type FindAllCommodityTypesRow struct {
	ID          string             `json:"id"`
	Description string             `json:"description"`
	Author      string             `json:"author"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) FindAllCommodityTypes(ctx context.Context) ([]FindAllCommodityTypesRow, error) {
	rows, err := q.db.Query(ctx, findAllCommodityTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FindAllCommodityTypesRow{}
	for rows.Next() {
		var i FindAllCommodityTypesRow
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.Author,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findCommodityTypeByID = `-- name: FindCommodityTypeByID :one
SELECT
    id,
    description,
    author,
    created_at,
    updated_at
FROM
    commodity_types
WHERE
    id = $1
AND
    deleted_at IS NULL
`

type FindCommodityTypeByIDRow struct {
	ID          string             `json:"id"`
	Description string             `json:"description"`
	Author      string             `json:"author"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) FindCommodityTypeByID(ctx context.Context, dollar_1 pgtype.Text) (FindCommodityTypeByIDRow, error) {
	row := q.db.QueryRow(ctx, findCommodityTypeByID, dollar_1)
	var i FindCommodityTypeByIDRow
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.Author,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertCommodityType = `-- name: InsertCommodityType :exec
INSERT INTO commodity_types(id, description, author, created_at)
VALUES ($1, $2, $3, $4)
`

type InsertCommodityTypeParams struct {
	Column1 pgtype.Text        `json:"column_1"`
	Column2 pgtype.Text        `json:"column_2"`
	Column3 pgtype.Text        `json:"column_3"`
	Column4 pgtype.Timestamptz `json:"column_4"`
}

func (q *Queries) InsertCommodityType(ctx context.Context, arg InsertCommodityTypeParams) error {
	_, err := q.db.Exec(ctx, insertCommodityType,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Column4,
	)
	return err
}

const updateCommodityType = `-- name: UpdateCommodityType :execrows
UPDATE
    commodity_types
SET
    description = $1,
    updated_at = $2
WHERE
    id = $3
AND
    deleted_at IS NULL
`

type UpdateCommodityTypeParams struct {
	Description pgtype.Text        `json:"description"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
	ID          pgtype.Text        `json:"id"`
}

func (q *Queries) UpdateCommodityType(ctx context.Context, arg UpdateCommodityTypeParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateCommodityType, arg.Description, arg.UpdatedAt, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
