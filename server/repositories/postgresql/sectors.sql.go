// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: sectors.sql

package postgresql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteSector = `-- name: DeleteSector :execrows
UPDATE
    sectors
SET
    deleted_at = $1
WHERE
    id = $2
AND
    deleted_at IS NULL
`

type DeleteSectorParams struct {
	DeletedAt pgtype.Timestamptz `json:"deleted_at"`
	ID        string             `json:"id"`
}

func (q *Queries) DeleteSector(ctx context.Context, arg DeleteSectorParams) (int64, error) {
	result, err := q.db.Exec(ctx, deleteSector, arg.DeletedAt, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const findAllSectors = `-- name: FindAllSectors :many
SELECT
    id,
    name,
    author,
    created_at
FROM
    sectors
WHERE
    deleted_at IS NULL
ORDER BY
    name ASC
`

type FindAllSectorsRow struct {
	ID        string             `json:"id"`
	Name      string             `json:"name"`
	Author    string             `json:"author"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) FindAllSectors(ctx context.Context) ([]FindAllSectorsRow, error) {
	rows, err := q.db.Query(ctx, findAllSectors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FindAllSectorsRow{}
	for rows.Next() {
		var i FindAllSectorsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Author,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findSectorByID = `-- name: FindSectorByID :one
SELECT
    id,
    name,
    description,
    author,
    created_at,
    updated_at
FROM
    sectors
WHERE
    id = $1
AND
    deleted_at IS NULL
`

type FindSectorByIDRow struct {
	ID          string             `json:"id"`
	Name        string             `json:"name"`
	Description pgtype.Text        `json:"description"`
	Author      string             `json:"author"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) FindSectorByID(ctx context.Context, id string) (FindSectorByIDRow, error) {
	row := q.db.QueryRow(ctx, findSectorByID, id)
	var i FindSectorByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Author,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertSector = `-- name: InsertSector :exec
INSERT INTO sectors(id, name, description, author, created_at)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
)
`

type InsertSectorParams struct {
	ID          string             `json:"id"`
	Name        string             `json:"name"`
	Description pgtype.Text        `json:"description"`
	Author      string             `json:"author"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) InsertSector(ctx context.Context, arg InsertSectorParams) error {
	_, err := q.db.Exec(ctx, insertSector,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Author,
		arg.CreatedAt,
	)
	return err
}

const updateSector = `-- name: UpdateSector :execrows
UPDATE
    sectors
SET
    name = $1,
    description = $2,
    author = $3,
    updated_at = $4
WHERE
    id = $5
AND
    deleted_at IS NULL
`

type UpdateSectorParams struct {
	Name        string             `json:"name"`
	Description pgtype.Text        `json:"description"`
	Author      string             `json:"author"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
	ID          string             `json:"id"`
}

func (q *Queries) UpdateSector(ctx context.Context, arg UpdateSectorParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateSector,
		arg.Name,
		arg.Description,
		arg.Author,
		arg.UpdatedAt,
		arg.ID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
