// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: ikms.sql

package postgresql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteIKM = `-- name: DeleteIKM :execrows
UPDATE
    ikms
SET
    deleted_at = $1
WHERE
    id = $2
AND
    deleted_at IS NULL
`

type DeleteIKMParams struct {
	DeletedAt pgtype.Timestamptz `json:"deleted_at"`
	ID        pgtype.Text        `json:"id"`
}

func (q *Queries) DeleteIKM(ctx context.Context, arg DeleteIKMParams) (int64, error) {
	result, err := q.db.Exec(ctx, deleteIKM, arg.DeletedAt, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const findAllIKMs = `-- name: FindAllIKMs :many
SELECT
    id,
    description,
    village_id,
    business_type,
    author,
    created_at
FROM
    ikms
WHERE
    deleted_at IS NULL
ORDER BY
    created_at DESC
`

type FindAllIKMsRow struct {
	ID           string             `json:"id"`
	Description  string             `json:"description"`
	VillageID    string             `json:"village_id"`
	BusinessType string             `json:"business_type"`
	Author       string             `json:"author"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) FindAllIKMs(ctx context.Context) ([]FindAllIKMsRow, error) {
	rows, err := q.db.Query(ctx, findAllIKMs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FindAllIKMsRow{}
	for rows.Next() {
		var i FindAllIKMsRow
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.VillageID,
			&i.BusinessType,
			&i.Author,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findIKMsByBusinessType = `-- name: FindIKMsByBusinessType :many
SELECT
    id,
    description,
    village_id,
    business_type,
    author,
    created_at
FROM
    ikms
WHERE
    business_type = $1
AND
    deleted_at IS NULL
ORDER BY
    created_at DESC
`

type FindIKMsByBusinessTypeRow struct {
	ID           string             `json:"id"`
	Description  string             `json:"description"`
	VillageID    string             `json:"village_id"`
	BusinessType string             `json:"business_type"`
	Author       string             `json:"author"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) FindIKMsByBusinessType(ctx context.Context, dollar_1 pgtype.Text) ([]FindIKMsByBusinessTypeRow, error) {
	rows, err := q.db.Query(ctx, findIKMsByBusinessType, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FindIKMsByBusinessTypeRow{}
	for rows.Next() {
		var i FindIKMsByBusinessTypeRow
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.VillageID,
			&i.BusinessType,
			&i.Author,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findIKMsByVillage = `-- name: FindIKMsByVillage :many
SELECT
    id,
    description,
    village_id,
    business_type,
    author,
    created_at
FROM
    ikms
WHERE
    village_id = $1
AND
    deleted_at IS NULL
ORDER BY
    created_at DESC
`

type FindIKMsByVillageRow struct {
	ID           string             `json:"id"`
	Description  string             `json:"description"`
	VillageID    string             `json:"village_id"`
	BusinessType string             `json:"business_type"`
	Author       string             `json:"author"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) FindIKMsByVillage(ctx context.Context, dollar_1 pgtype.Text) ([]FindIKMsByVillageRow, error) {
	rows, err := q.db.Query(ctx, findIKMsByVillage, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FindIKMsByVillageRow{}
	for rows.Next() {
		var i FindIKMsByVillageRow
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.VillageID,
			&i.BusinessType,
			&i.Author,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const iKM = `-- name: IKM :one
SELECT
    id,
    description,
    village_id,
    business_type,
    author,
    created_at,
    updated_at
FROM
    ikms
WHERE
    id = $1
AND
    deleted_at IS NULL
`

type IKMRow struct {
	ID           string             `json:"id"`
	Description  string             `json:"description"`
	VillageID    string             `json:"village_id"`
	BusinessType string             `json:"business_type"`
	Author       string             `json:"author"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) IKM(ctx context.Context, dollar_1 pgtype.Text) (IKMRow, error) {
	row := q.db.QueryRow(ctx, iKM, dollar_1)
	var i IKMRow
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.VillageID,
		&i.BusinessType,
		&i.Author,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertIKM = `-- name: InsertIKM :exec
INSERT INTO ikms(id, description, village_id, business_type, author, created_at)
VALUES ($1, $2, $3, $4, $5, $6)
`

type InsertIKMParams struct {
	Column1 pgtype.Text        `json:"column_1"`
	Column2 pgtype.Text        `json:"column_2"`
	Column3 pgtype.Text        `json:"column_3"`
	Column4 pgtype.Text        `json:"column_4"`
	Column5 pgtype.Text        `json:"column_5"`
	Column6 pgtype.Timestamptz `json:"column_6"`
}

func (q *Queries) InsertIKM(ctx context.Context, arg InsertIKMParams) error {
	_, err := q.db.Exec(ctx, insertIKM,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Column4,
		arg.Column5,
		arg.Column6,
	)
	return err
}

const updateIKM = `-- name: UpdateIKM :execrows
UPDATE
    ikms
SET
    description = $1,
    village_id = $2,
    business_type = $3,
    updated_at = $4
WHERE
    id = $5
AND
    deleted_at IS NULL
`

type UpdateIKMParams struct {
	Description  pgtype.Text        `json:"description"`
	VillageID    pgtype.Text        `json:"village_id"`
	BusinessType pgtype.Text        `json:"business_type"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
	ID           pgtype.Text        `json:"id"`
}

func (q *Queries) UpdateIKM(ctx context.Context, arg UpdateIKMParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateIKM,
		arg.Description,
		arg.VillageID,
		arg.BusinessType,
		arg.UpdatedAt,
		arg.ID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
