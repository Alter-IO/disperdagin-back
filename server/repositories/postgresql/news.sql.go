// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: news.sql

package postgresql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteNews = `-- name: DeleteNews :execrows
UPDATE
    news
SET
    deleted_at = $1
WHERE
    id = $2
AND
    deleted_at IS NULL
`

type DeleteNewsParams struct {
	DeletedAt pgtype.Timestamptz `json:"deleted_at"`
	ID        pgtype.Text        `json:"id"`
}

func (q *Queries) DeleteNews(ctx context.Context, arg DeleteNewsParams) (int64, error) {
	result, err := q.db.Exec(ctx, deleteNews, arg.DeletedAt, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const findAllNews = `-- name: FindAllNews :many
SELECT
    id,
    title,
    author,
    created_at
FROM
    news
WHERE
    deleted_at IS NULL
ORDER BY
    created_at DESC
`

type FindAllNewsRow struct {
	ID        string             `json:"id"`
	Title     string             `json:"title"`
	Author    string             `json:"author"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) FindAllNews(ctx context.Context) ([]FindAllNewsRow, error) {
	rows, err := q.db.Query(ctx, findAllNews)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FindAllNewsRow{}
	for rows.Next() {
		var i FindAllNewsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Author,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findNewsById = `-- name: FindNewsById :one
SELECT
    id,
    title,
    content,
    author,
    created_at,
    updated_at
FROM
    news
WHERE
    id = $1
AND
    deleted_at IS NULL
`

type FindNewsByIdRow struct {
	ID        string             `json:"id"`
	Title     string             `json:"title"`
	Content   string             `json:"content"`
	Author    string             `json:"author"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) FindNewsById(ctx context.Context, dollar_1 pgtype.Text) (FindNewsByIdRow, error) {
	row := q.db.QueryRow(ctx, findNewsById, dollar_1)
	var i FindNewsByIdRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Author,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertNews = `-- name: InsertNews :exec
INSERT INTO news(id, title, content, author, created_at)
VALUES ($1, $2, $3, $4, $5)
`

type InsertNewsParams struct {
	Column1 pgtype.Text        `json:"column_1"`
	Column2 pgtype.Text        `json:"column_2"`
	Column3 pgtype.Text        `json:"column_3"`
	Column4 pgtype.Text        `json:"column_4"`
	Column5 pgtype.Timestamptz `json:"column_5"`
}

func (q *Queries) InsertNews(ctx context.Context, arg InsertNewsParams) error {
	_, err := q.db.Exec(ctx, insertNews,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Column4,
		arg.Column5,
	)
	return err
}

const updateNews = `-- name: UpdateNews :execrows
UPDATE
    news
SET
    title = $1,
    content = $2,
    updated_at = $3
WHERE
    id = $4
AND
    deleted_at IS NULL
`

type UpdateNewsParams struct {
	Title     pgtype.Text        `json:"title"`
	Content   pgtype.Text        `json:"content"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	ID        pgtype.Text        `json:"id"`
}

func (q *Queries) UpdateNews(ctx context.Context, arg UpdateNewsParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateNews,
		arg.Title,
		arg.Content,
		arg.UpdatedAt,
		arg.ID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
