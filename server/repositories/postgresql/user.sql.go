// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package postgresql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteUser = `-- name: DeleteUser :execrows
UPDATE
    users
SET
    deleted_at = $1
WHERE
    id = $2
AND
    deleted_at IS NULL
`

type DeleteUserParams struct {
	DeletedAt pgtype.Timestamptz `json:"deleted_at"`
	ID        string             `json:"id"`
}

func (q *Queries) DeleteUser(ctx context.Context, arg DeleteUserParams) (int64, error) {
	result, err := q.db.Exec(ctx, deleteUser, arg.DeletedAt, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const findUserByID = `-- name: FindUserByID :one
SELECT
    id,
    role_id,
    username,
    password
FROM
    users
WHERE
    id = $1
AND
    deleted_at IS NULL
`

type FindUserByIDRow struct {
	ID       string `json:"id"`
	RoleID   string `json:"role_id"`
	Username string `json:"username"`
	Password string `json:"password"`
}

func (q *Queries) FindUserByID(ctx context.Context, id string) (FindUserByIDRow, error) {
	row := q.db.QueryRow(ctx, findUserByID, id)
	var i FindUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.RoleID,
		&i.Username,
		&i.Password,
	)
	return i, err
}

const findUsers = `-- name: FindUsers :many
SELECT
    id,
    role_id,
    username
FROM
    users
WHERE
    deleted_at IS NULL
ORDER BY
    id DESC
`

type FindUsersRow struct {
	ID       string `json:"id"`
	RoleID   string `json:"role_id"`
	Username string `json:"username"`
}

func (q *Queries) FindUsers(ctx context.Context) ([]FindUsersRow, error) {
	rows, err := q.db.Query(ctx, findUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FindUsersRow{}
	for rows.Next() {
		var i FindUsersRow
		if err := rows.Scan(&i.ID, &i.RoleID, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertUser = `-- name: InsertUser :exec
INSERT INTO users(id, role_id, username, password, created_at)
VALUES ($1, $2, $3, $4, $5)
`

type InsertUserParams struct {
	ID        string             `json:"id"`
	RoleID    string             `json:"role_id"`
	Username  string             `json:"username"`
	Password  string             `json:"password"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) error {
	_, err := q.db.Exec(ctx, insertUser,
		arg.ID,
		arg.RoleID,
		arg.Username,
		arg.Password,
		arg.CreatedAt,
	)
	return err
}

const updatePassword = `-- name: UpdatePassword :execrows
UPDATE
    users
SET
    password = $1,
    updated_at = $2
WHERE
    id = $3
AND
    deleted_at IS NULL
`

type UpdatePasswordParams struct {
	Password  string             `json:"password"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	ID        string             `json:"id"`
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) (int64, error) {
	result, err := q.db.Exec(ctx, updatePassword, arg.Password, arg.UpdatedAt, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
