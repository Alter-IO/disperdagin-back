// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: greeting.sql

package postgresql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteGreeting = `-- name: DeleteGreeting :execrows
UPDATE
    greetings
SET
    deleted_at = $1
WHERE
    id = $2
AND
    deleted_at IS NULL
`

type DeleteGreetingParams struct {
	DeletedAt pgtype.Timestamptz `json:"deleted_at"`
	ID        string             `json:"id"`
}

func (q *Queries) DeleteGreeting(ctx context.Context, arg DeleteGreetingParams) (int64, error) {
	result, err := q.db.Exec(ctx, deleteGreeting, arg.DeletedAt, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const findAllGreetings = `-- name: FindAllGreetings :many
SELECT
    id,
    message,
    author,
    created_at
FROM
    greetings
WHERE
    deleted_at IS NULL
ORDER BY
    created_at DESC
`

type FindAllGreetingsRow struct {
	ID        string             `json:"id"`
	Message   string             `json:"message"`
	Author    string             `json:"author"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) FindAllGreetings(ctx context.Context) ([]FindAllGreetingsRow, error) {
	rows, err := q.db.Query(ctx, findAllGreetings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FindAllGreetingsRow{}
	for rows.Next() {
		var i FindAllGreetingsRow
		if err := rows.Scan(
			&i.ID,
			&i.Message,
			&i.Author,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findGreetingByID = `-- name: FindGreetingByID :one
SELECT
    id,
    message,
    author,
    created_at,
    updated_at
FROM
    greetings
WHERE
    id = $1
AND
    deleted_at IS NULL
`

type FindGreetingByIDRow struct {
	ID        string             `json:"id"`
	Message   string             `json:"message"`
	Author    string             `json:"author"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) FindGreetingByID(ctx context.Context, id string) (FindGreetingByIDRow, error) {
	row := q.db.QueryRow(ctx, findGreetingByID, id)
	var i FindGreetingByIDRow
	err := row.Scan(
		&i.ID,
		&i.Message,
		&i.Author,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findLatestGreeting = `-- name: FindLatestGreeting :one
SELECT
    id,
    message,
    author,
    created_at,
    updated_at
FROM
    greetings
WHERE
    deleted_at IS NULL
ORDER BY
    created_at DESC
LIMIT 1
`

type FindLatestGreetingRow struct {
	ID        string             `json:"id"`
	Message   string             `json:"message"`
	Author    string             `json:"author"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) FindLatestGreeting(ctx context.Context) (FindLatestGreetingRow, error) {
	row := q.db.QueryRow(ctx, findLatestGreeting)
	var i FindLatestGreetingRow
	err := row.Scan(
		&i.ID,
		&i.Message,
		&i.Author,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertGreeting = `-- name: InsertGreeting :exec
INSERT INTO greetings(id, message, author, created_at)
VALUES (
    $1,
    $2,
    $3,
    $4
)
`

type InsertGreetingParams struct {
	ID        string             `json:"id"`
	Message   string             `json:"message"`
	Author    string             `json:"author"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) InsertGreeting(ctx context.Context, arg InsertGreetingParams) error {
	_, err := q.db.Exec(ctx, insertGreeting,
		arg.ID,
		arg.Message,
		arg.Author,
		arg.CreatedAt,
	)
	return err
}

const updateGreeting = `-- name: UpdateGreeting :execrows
UPDATE
    greetings
SET
    message = $1,
    updated_at = $2
WHERE
    id = $3
AND
    deleted_at IS NULL
`

type UpdateGreetingParams struct {
	Message   string             `json:"message"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	ID        string             `json:"id"`
}

func (q *Queries) UpdateGreeting(ctx context.Context, arg UpdateGreetingParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateGreeting, arg.Message, arg.UpdatedAt, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
