// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: employee.sql

package postgresql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteEmployee = `-- name: DeleteEmployee :execrows
UPDATE
    employees
SET
    deleted_at = $1
WHERE
    id = $2
AND
    deleted_at IS NULL
`

type DeleteEmployeeParams struct {
	DeletedAt pgtype.Timestamptz `json:"deleted_at"`
	ID        string             `json:"id"`
}

func (q *Queries) DeleteEmployee(ctx context.Context, arg DeleteEmployeeParams) (int64, error) {
	result, err := q.db.Exec(ctx, deleteEmployee, arg.DeletedAt, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const findActiveEmployees = `-- name: FindActiveEmployees :many
SELECT
    id,
    name,
    position,
    employee_id,
    author,
    created_at
FROM
    employees
WHERE
    status = 1
AND
    deleted_at IS NULL
ORDER BY
    name ASC
`

type FindActiveEmployeesRow struct {
	ID         string             `json:"id"`
	Name       string             `json:"name"`
	Position   string             `json:"position"`
	EmployeeID pgtype.Text        `json:"employee_id"`
	Author     string             `json:"author"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) FindActiveEmployees(ctx context.Context) ([]FindActiveEmployeesRow, error) {
	rows, err := q.db.Query(ctx, findActiveEmployees)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FindActiveEmployeesRow{}
	for rows.Next() {
		var i FindActiveEmployeesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Position,
			&i.EmployeeID,
			&i.Author,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAllEmployees = `-- name: FindAllEmployees :many
SELECT
    id,
    name,
    position,
    employee_id,
    status,
    author,
    created_at
FROM
    employees
WHERE
    deleted_at IS NULL
ORDER BY
    name ASC
`

type FindAllEmployeesRow struct {
	ID         string             `json:"id"`
	Name       string             `json:"name"`
	Position   string             `json:"position"`
	EmployeeID pgtype.Text        `json:"employee_id"`
	Status     pgtype.Int4        `json:"status"`
	Author     string             `json:"author"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) FindAllEmployees(ctx context.Context) ([]FindAllEmployeesRow, error) {
	rows, err := q.db.Query(ctx, findAllEmployees)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FindAllEmployeesRow{}
	for rows.Next() {
		var i FindAllEmployeesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Position,
			&i.EmployeeID,
			&i.Status,
			&i.Author,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findEmployeeByID = `-- name: FindEmployeeByID :one
SELECT
    id,
    name,
    position,
    address,
    employee_id,
    birthplace,
    birthdate,
    photo,
    status,
    author,
    created_at,
    updated_at
FROM
    employees
WHERE
    id = $1
AND
    deleted_at IS NULL
`

type FindEmployeeByIDRow struct {
	ID         string             `json:"id"`
	Name       string             `json:"name"`
	Position   string             `json:"position"`
	Address    pgtype.Text        `json:"address"`
	EmployeeID pgtype.Text        `json:"employee_id"`
	Birthplace pgtype.Text        `json:"birthplace"`
	Birthdate  pgtype.Date        `json:"birthdate"`
	Photo      pgtype.Text        `json:"photo"`
	Status     pgtype.Int4        `json:"status"`
	Author     string             `json:"author"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) FindEmployeeByID(ctx context.Context, id string) (FindEmployeeByIDRow, error) {
	row := q.db.QueryRow(ctx, findEmployeeByID, id)
	var i FindEmployeeByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Position,
		&i.Address,
		&i.EmployeeID,
		&i.Birthplace,
		&i.Birthdate,
		&i.Photo,
		&i.Status,
		&i.Author,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findEmployeePositions = `-- name: FindEmployeePositions :many
SELECT DISTINCT ON (LOWER(position))
    position
FROM employees
ORDER BY LOWER(position), position
`

func (q *Queries) FindEmployeePositions(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, findEmployeePositions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var position string
		if err := rows.Scan(&position); err != nil {
			return nil, err
		}
		items = append(items, position)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findEmployeesByPosition = `-- name: FindEmployeesByPosition :many
SELECT
    id,
    name,
    position,
    employee_id,
    status,
    author,
    created_at
FROM
    employees
WHERE
    position = $1
AND
    deleted_at IS NULL
ORDER BY
    name ASC
`

type FindEmployeesByPositionRow struct {
	ID         string             `json:"id"`
	Name       string             `json:"name"`
	Position   string             `json:"position"`
	EmployeeID pgtype.Text        `json:"employee_id"`
	Status     pgtype.Int4        `json:"status"`
	Author     string             `json:"author"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) FindEmployeesByPosition(ctx context.Context, position string) ([]FindEmployeesByPositionRow, error) {
	rows, err := q.db.Query(ctx, findEmployeesByPosition, position)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FindEmployeesByPositionRow{}
	for rows.Next() {
		var i FindEmployeesByPositionRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Position,
			&i.EmployeeID,
			&i.Status,
			&i.Author,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertEmployee = `-- name: InsertEmployee :exec
INSERT INTO employees(id, name, position, address, employee_id, birthplace, birthdate, photo, status, author, created_at)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11
)
`

type InsertEmployeeParams struct {
	ID         string             `json:"id"`
	Name       string             `json:"name"`
	Position   string             `json:"position"`
	Address    pgtype.Text        `json:"address"`
	EmployeeID pgtype.Text        `json:"employee_id"`
	Birthplace pgtype.Text        `json:"birthplace"`
	Birthdate  pgtype.Date        `json:"birthdate"`
	Photo      pgtype.Text        `json:"photo"`
	Status     pgtype.Int4        `json:"status"`
	Author     string             `json:"author"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) InsertEmployee(ctx context.Context, arg InsertEmployeeParams) error {
	_, err := q.db.Exec(ctx, insertEmployee,
		arg.ID,
		arg.Name,
		arg.Position,
		arg.Address,
		arg.EmployeeID,
		arg.Birthplace,
		arg.Birthdate,
		arg.Photo,
		arg.Status,
		arg.Author,
		arg.CreatedAt,
	)
	return err
}

const updateEmployee = `-- name: UpdateEmployee :execrows
UPDATE
    employees
SET
    name = $1,
    position = $2,
    address = $3,
    employee_id = $4,
    birthplace = $5,
    birthdate = $6,
    photo = $7,
    status = $8,
    author = $9,
    updated_at = $10
WHERE
    id = $11
AND
    deleted_at IS NULL
`

type UpdateEmployeeParams struct {
	Name       string             `json:"name"`
	Position   string             `json:"position"`
	Address    pgtype.Text        `json:"address"`
	EmployeeID pgtype.Text        `json:"employee_id"`
	Birthplace pgtype.Text        `json:"birthplace"`
	Birthdate  pgtype.Date        `json:"birthdate"`
	Photo      pgtype.Text        `json:"photo"`
	Status     pgtype.Int4        `json:"status"`
	Author     string             `json:"author"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
	ID         string             `json:"id"`
}

func (q *Queries) UpdateEmployee(ctx context.Context, arg UpdateEmployeeParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateEmployee,
		arg.Name,
		arg.Position,
		arg.Address,
		arg.EmployeeID,
		arg.Birthplace,
		arg.Birthdate,
		arg.Photo,
		arg.Status,
		arg.Author,
		arg.UpdatedAt,
		arg.ID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
