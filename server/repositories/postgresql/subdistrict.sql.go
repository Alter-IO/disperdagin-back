// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: subdistrict.sql

package postgresql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteSubdistrict = `-- name: DeleteSubdistrict :execrows
UPDATE
    subdistricts
SET
    deleted_at = $1
WHERE
    id = $2
AND
    deleted_at IS NULL
`

type DeleteSubdistrictParams struct {
	DeletedAt pgtype.Timestamptz `json:"deleted_at"`
	ID        string             `json:"id"`
}

func (q *Queries) DeleteSubdistrict(ctx context.Context, arg DeleteSubdistrictParams) (int64, error) {
	result, err := q.db.Exec(ctx, deleteSubdistrict, arg.DeletedAt, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const findAllSubdistricts = `-- name: FindAllSubdistricts :many
SELECT
    id,
    name,
    author,
    created_at
FROM
    subdistricts
WHERE
    deleted_at IS NULL
ORDER BY
    name ASC
`

type FindAllSubdistrictsRow struct {
	ID        string             `json:"id"`
	Name      string             `json:"name"`
	Author    string             `json:"author"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) FindAllSubdistricts(ctx context.Context) ([]FindAllSubdistrictsRow, error) {
	rows, err := q.db.Query(ctx, findAllSubdistricts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FindAllSubdistrictsRow{}
	for rows.Next() {
		var i FindAllSubdistrictsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Author,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findSubdistrictByID = `-- name: FindSubdistrictByID :one
SELECT
    id,
    name,
    author,
    created_at,
    updated_at
FROM
    subdistricts
WHERE
    id = $1
AND
    deleted_at IS NULL
`

type FindSubdistrictByIDRow struct {
	ID        string             `json:"id"`
	Name      string             `json:"name"`
	Author    string             `json:"author"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) FindSubdistrictByID(ctx context.Context, id string) (FindSubdistrictByIDRow, error) {
	row := q.db.QueryRow(ctx, findSubdistrictByID, id)
	var i FindSubdistrictByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Author,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertSubdistrict = `-- name: InsertSubdistrict :exec
INSERT INTO subdistricts(id, name, author, created_at)
VALUES (
    $1,
    $2,
    $3,
    $4
)
`

type InsertSubdistrictParams struct {
	ID        string             `json:"id"`
	Name      string             `json:"name"`
	Author    string             `json:"author"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) InsertSubdistrict(ctx context.Context, arg InsertSubdistrictParams) error {
	_, err := q.db.Exec(ctx, insertSubdistrict,
		arg.ID,
		arg.Name,
		arg.Author,
		arg.CreatedAt,
	)
	return err
}

const updateSubdistrict = `-- name: UpdateSubdistrict :execrows
UPDATE
    subdistricts
SET
    name = $1,
    updated_at = $2
WHERE
    id = $3
AND
    deleted_at IS NULL
`

type UpdateSubdistrictParams struct {
	Name      string             `json:"name"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	ID        string             `json:"id"`
}

func (q *Queries) UpdateSubdistrict(ctx context.Context, arg UpdateSubdistrictParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateSubdistrict, arg.Name, arg.UpdatedAt, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
