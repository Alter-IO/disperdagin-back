// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: market_fee.sql

package postgresql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteMarketFee = `-- name: DeleteMarketFee :execrows
UPDATE
    market_fees
SET
    deleted_at = $1
WHERE
    id = $2
AND
    deleted_at IS NULL
`

type DeleteMarketFeeParams struct {
	DeletedAt pgtype.Timestamptz `json:"deleted_at"`
	ID        string             `json:"id"`
}

func (q *Queries) DeleteMarketFee(ctx context.Context, arg DeleteMarketFeeParams) (int64, error) {
	result, err := q.db.Exec(ctx, deleteMarketFee, arg.DeletedAt, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const findAllMarketFees = `-- name: FindAllMarketFees :many
SELECT
    id,
    market_id,
    permanent_kiosk_revenue,
    non_permanent_kiosk_revenue,
    collection_status,
    semester,
    year,
    author,
    created_at
FROM
    market_fees
WHERE
    deleted_at IS NULL
ORDER BY
    year DESC, semester DESC
`

type FindAllMarketFeesRow struct {
	ID                       string             `json:"id"`
	MarketID                 string             `json:"market_id"`
	PermanentKioskRevenue    pgtype.Numeric     `json:"permanent_kiosk_revenue"`
	NonPermanentKioskRevenue pgtype.Numeric     `json:"non_permanent_kiosk_revenue"`
	CollectionStatus         string             `json:"collection_status"`
	Semester                 string             `json:"semester"`
	Year                     int32              `json:"year"`
	Author                   string             `json:"author"`
	CreatedAt                pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) FindAllMarketFees(ctx context.Context) ([]FindAllMarketFeesRow, error) {
	rows, err := q.db.Query(ctx, findAllMarketFees)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FindAllMarketFeesRow{}
	for rows.Next() {
		var i FindAllMarketFeesRow
		if err := rows.Scan(
			&i.ID,
			&i.MarketID,
			&i.PermanentKioskRevenue,
			&i.NonPermanentKioskRevenue,
			&i.CollectionStatus,
			&i.Semester,
			&i.Year,
			&i.Author,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findMarketFeeByID = `-- name: FindMarketFeeByID :one
SELECT
    id,
    market_id,
    num_permanent_kiosks,
    num_non_permanent_kiosks,
    permanent_kiosk_revenue,
    non_permanent_kiosk_revenue,
    collection_status,
    description,
    semester,
    year,
    author,
    created_at,
    updated_at
FROM
    market_fees
WHERE
    id = $1
AND
    deleted_at IS NULL
`

type FindMarketFeeByIDRow struct {
	ID                       string             `json:"id"`
	MarketID                 string             `json:"market_id"`
	NumPermanentKiosks       int32              `json:"num_permanent_kiosks"`
	NumNonPermanentKiosks    int32              `json:"num_non_permanent_kiosks"`
	PermanentKioskRevenue    pgtype.Numeric     `json:"permanent_kiosk_revenue"`
	NonPermanentKioskRevenue pgtype.Numeric     `json:"non_permanent_kiosk_revenue"`
	CollectionStatus         string             `json:"collection_status"`
	Description              pgtype.Text        `json:"description"`
	Semester                 string             `json:"semester"`
	Year                     int32              `json:"year"`
	Author                   string             `json:"author"`
	CreatedAt                pgtype.Timestamptz `json:"created_at"`
	UpdatedAt                pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) FindMarketFeeByID(ctx context.Context, id string) (FindMarketFeeByIDRow, error) {
	row := q.db.QueryRow(ctx, findMarketFeeByID, id)
	var i FindMarketFeeByIDRow
	err := row.Scan(
		&i.ID,
		&i.MarketID,
		&i.NumPermanentKiosks,
		&i.NumNonPermanentKiosks,
		&i.PermanentKioskRevenue,
		&i.NonPermanentKioskRevenue,
		&i.CollectionStatus,
		&i.Description,
		&i.Semester,
		&i.Year,
		&i.Author,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findMarketFeesByMarket = `-- name: FindMarketFeesByMarket :many
SELECT
    id,
    market_id,
    permanent_kiosk_revenue,
    non_permanent_kiosk_revenue,
    collection_status,
    semester,
    year,
    author,
    created_at
FROM
    market_fees
WHERE
    market_id = $1
AND
    deleted_at IS NULL
ORDER BY
    year DESC, semester DESC
`

type FindMarketFeesByMarketRow struct {
	ID                       string             `json:"id"`
	MarketID                 string             `json:"market_id"`
	PermanentKioskRevenue    pgtype.Numeric     `json:"permanent_kiosk_revenue"`
	NonPermanentKioskRevenue pgtype.Numeric     `json:"non_permanent_kiosk_revenue"`
	CollectionStatus         string             `json:"collection_status"`
	Semester                 string             `json:"semester"`
	Year                     int32              `json:"year"`
	Author                   string             `json:"author"`
	CreatedAt                pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) FindMarketFeesByMarket(ctx context.Context, marketID string) ([]FindMarketFeesByMarketRow, error) {
	rows, err := q.db.Query(ctx, findMarketFeesByMarket, marketID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FindMarketFeesByMarketRow{}
	for rows.Next() {
		var i FindMarketFeesByMarketRow
		if err := rows.Scan(
			&i.ID,
			&i.MarketID,
			&i.PermanentKioskRevenue,
			&i.NonPermanentKioskRevenue,
			&i.CollectionStatus,
			&i.Semester,
			&i.Year,
			&i.Author,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findMarketFeesBySemesterAndYear = `-- name: FindMarketFeesBySemesterAndYear :many
SELECT
    id,
    market_id,
    permanent_kiosk_revenue,
    non_permanent_kiosk_revenue,
    collection_status,
    semester,
    year,
    author,
    created_at
FROM
    market_fees
WHERE
    semester = $1
AND
    year = $2
AND
    deleted_at IS NULL
ORDER BY
    market_id
`

type FindMarketFeesBySemesterAndYearParams struct {
	Semester string `json:"semester"`
	Year     int32  `json:"year"`
}

type FindMarketFeesBySemesterAndYearRow struct {
	ID                       string             `json:"id"`
	MarketID                 string             `json:"market_id"`
	PermanentKioskRevenue    pgtype.Numeric     `json:"permanent_kiosk_revenue"`
	NonPermanentKioskRevenue pgtype.Numeric     `json:"non_permanent_kiosk_revenue"`
	CollectionStatus         string             `json:"collection_status"`
	Semester                 string             `json:"semester"`
	Year                     int32              `json:"year"`
	Author                   string             `json:"author"`
	CreatedAt                pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) FindMarketFeesBySemesterAndYear(ctx context.Context, arg FindMarketFeesBySemesterAndYearParams) ([]FindMarketFeesBySemesterAndYearRow, error) {
	rows, err := q.db.Query(ctx, findMarketFeesBySemesterAndYear, arg.Semester, arg.Year)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FindMarketFeesBySemesterAndYearRow{}
	for rows.Next() {
		var i FindMarketFeesBySemesterAndYearRow
		if err := rows.Scan(
			&i.ID,
			&i.MarketID,
			&i.PermanentKioskRevenue,
			&i.NonPermanentKioskRevenue,
			&i.CollectionStatus,
			&i.Semester,
			&i.Year,
			&i.Author,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findMarketFeesByYear = `-- name: FindMarketFeesByYear :many
SELECT
    id,
    market_id,
    permanent_kiosk_revenue,
    non_permanent_kiosk_revenue,
    collection_status,
    semester,
    year,
    author,
    created_at
FROM
    market_fees
WHERE
    year = $1
AND
    deleted_at IS NULL
ORDER BY
    market_id, semester
`

type FindMarketFeesByYearRow struct {
	ID                       string             `json:"id"`
	MarketID                 string             `json:"market_id"`
	PermanentKioskRevenue    pgtype.Numeric     `json:"permanent_kiosk_revenue"`
	NonPermanentKioskRevenue pgtype.Numeric     `json:"non_permanent_kiosk_revenue"`
	CollectionStatus         string             `json:"collection_status"`
	Semester                 string             `json:"semester"`
	Year                     int32              `json:"year"`
	Author                   string             `json:"author"`
	CreatedAt                pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) FindMarketFeesByYear(ctx context.Context, year int32) ([]FindMarketFeesByYearRow, error) {
	rows, err := q.db.Query(ctx, findMarketFeesByYear, year)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FindMarketFeesByYearRow{}
	for rows.Next() {
		var i FindMarketFeesByYearRow
		if err := rows.Scan(
			&i.ID,
			&i.MarketID,
			&i.PermanentKioskRevenue,
			&i.NonPermanentKioskRevenue,
			&i.CollectionStatus,
			&i.Semester,
			&i.Year,
			&i.Author,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertMarketFee = `-- name: InsertMarketFee :exec
INSERT INTO market_fees(
    id, 
    market_id, 
    num_permanent_kiosks, 
    num_non_permanent_kiosks, 
    permanent_kiosk_revenue, 
    non_permanent_kiosk_revenue, 
    collection_status, 
    description, 
    semester, 
    year, 
    author, 
    created_at
)
VALUES (
    $1, 
    $2, 
    $3, 
    $4, 
    $5, 
    $6, 
    $7, 
    $8, 
    $9, 
    $10, 
    $11, 
    $12
)
`

type InsertMarketFeeParams struct {
	ID                       string             `json:"id"`
	MarketID                 string             `json:"market_id"`
	NumPermanentKiosks       int32              `json:"num_permanent_kiosks"`
	NumNonPermanentKiosks    int32              `json:"num_non_permanent_kiosks"`
	PermanentKioskRevenue    pgtype.Numeric     `json:"permanent_kiosk_revenue"`
	NonPermanentKioskRevenue pgtype.Numeric     `json:"non_permanent_kiosk_revenue"`
	CollectionStatus         string             `json:"collection_status"`
	Description              pgtype.Text        `json:"description"`
	Semester                 string             `json:"semester"`
	Year                     int32              `json:"year"`
	Author                   string             `json:"author"`
	CreatedAt                pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) InsertMarketFee(ctx context.Context, arg InsertMarketFeeParams) error {
	_, err := q.db.Exec(ctx, insertMarketFee,
		arg.ID,
		arg.MarketID,
		arg.NumPermanentKiosks,
		arg.NumNonPermanentKiosks,
		arg.PermanentKioskRevenue,
		arg.NonPermanentKioskRevenue,
		arg.CollectionStatus,
		arg.Description,
		arg.Semester,
		arg.Year,
		arg.Author,
		arg.CreatedAt,
	)
	return err
}

const updateMarketFee = `-- name: UpdateMarketFee :execrows
UPDATE
    market_fees
SET
    market_id = $1,
    num_permanent_kiosks = $2,
    num_non_permanent_kiosks = $3,
    permanent_kiosk_revenue = $4,
    non_permanent_kiosk_revenue = $5,
    collection_status = $6,
    description = $7,
    semester = $8,
    year = $9,
    updated_at = $10
WHERE
    id = $11
AND
    deleted_at IS NULL
`

type UpdateMarketFeeParams struct {
	MarketID                 string             `json:"market_id"`
	NumPermanentKiosks       int32              `json:"num_permanent_kiosks"`
	NumNonPermanentKiosks    int32              `json:"num_non_permanent_kiosks"`
	PermanentKioskRevenue    pgtype.Numeric     `json:"permanent_kiosk_revenue"`
	NonPermanentKioskRevenue pgtype.Numeric     `json:"non_permanent_kiosk_revenue"`
	CollectionStatus         string             `json:"collection_status"`
	Description              pgtype.Text        `json:"description"`
	Semester                 string             `json:"semester"`
	Year                     int32              `json:"year"`
	UpdatedAt                pgtype.Timestamptz `json:"updated_at"`
	ID                       string             `json:"id"`
}

func (q *Queries) UpdateMarketFee(ctx context.Context, arg UpdateMarketFeeParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateMarketFee,
		arg.MarketID,
		arg.NumPermanentKiosks,
		arg.NumNonPermanentKiosks,
		arg.PermanentKioskRevenue,
		arg.NonPermanentKioskRevenue,
		arg.CollectionStatus,
		arg.Description,
		arg.Semester,
		arg.Year,
		arg.UpdatedAt,
		arg.ID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
