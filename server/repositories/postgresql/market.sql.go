// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: market.sql

package postgresql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteMarket = `-- name: DeleteMarket :execrows
UPDATE
    markets
SET
    deleted_at = $1
WHERE
    id = $2
AND
    deleted_at IS NULL
`

type DeleteMarketParams struct {
	DeletedAt pgtype.Timestamptz `json:"deleted_at"`
	ID        pgtype.Text        `json:"id"`
}

func (q *Queries) DeleteMarket(ctx context.Context, arg DeleteMarketParams) (int64, error) {
	result, err := q.db.Exec(ctx, deleteMarket, arg.DeletedAt, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const findAllMarkets = `-- name: FindAllMarkets :many
SELECT
    id,
    name,
    author,
    created_at
FROM
    markets
WHERE
    deleted_at IS NULL
ORDER BY
    name ASC
`

type FindAllMarketsRow struct {
	ID        string             `json:"id"`
	Name      string             `json:"name"`
	Author    string             `json:"author"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) FindAllMarkets(ctx context.Context) ([]FindAllMarketsRow, error) {
	rows, err := q.db.Query(ctx, findAllMarkets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FindAllMarketsRow{}
	for rows.Next() {
		var i FindAllMarketsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Author,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findMarketByID = `-- name: FindMarketByID :one
SELECT
    id,
    name,
    author,
    created_at,
    updated_at
FROM
    markets
WHERE
    id = $1
AND
    deleted_at IS NULL
`

type FindMarketByIDRow struct {
	ID        string             `json:"id"`
	Name      string             `json:"name"`
	Author    string             `json:"author"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) FindMarketByID(ctx context.Context, dollar_1 pgtype.Text) (FindMarketByIDRow, error) {
	row := q.db.QueryRow(ctx, findMarketByID, dollar_1)
	var i FindMarketByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Author,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertMarket = `-- name: InsertMarket :exec
INSERT INTO markets(id, name, author, created_at)
VALUES ($1, $2, $3, $4)
`

type InsertMarketParams struct {
	Column1 pgtype.Text        `json:"column_1"`
	Column2 pgtype.Text        `json:"column_2"`
	Column3 pgtype.Text        `json:"column_3"`
	Column4 pgtype.Timestamptz `json:"column_4"`
}

func (q *Queries) InsertMarket(ctx context.Context, arg InsertMarketParams) error {
	_, err := q.db.Exec(ctx, insertMarket,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Column4,
	)
	return err
}

const updateMarket = `-- name: UpdateMarket :execrows
UPDATE
    markets
SET
    name = $1,
    updated_at = $2
WHERE
    id = $3
AND
    deleted_at IS NULL
`

type UpdateMarketParams struct {
	Name      pgtype.Text        `json:"name"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	ID        pgtype.Text        `json:"id"`
}

func (q *Queries) UpdateMarket(ctx context.Context, arg UpdateMarketParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateMarket, arg.Name, arg.UpdatedAt, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
